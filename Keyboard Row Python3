"""
Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard.
"""

#77%
class Solution:
    def findWords(self, words: List[str]) -> List[str]:
        mid = set('asdfghjkl')
        top = set('qwertyuiop')
        bottom = set('zxcvbnm')
        ans = []
        for word in words:
            w = set(word.lower())
            if w <= mid or w<= top or w<= bottom:
                ans.append(word)
        return ans


Operation	                Equivalent	Result
len(s)	 	                            number of elements in set s (cardinality)
x in s	 	                            test x for membership in s
x not in s	 	                        test x for non-membership in s
s.issubset(t)	              s <= t	  test whether every element in s is in t
s.issuperset(t)	            s >= t	  test whether every element in t is in s
s.union(t)	                s | t	    new set with elements from both s and t
s.intersection(t)	          s & t   	new set with elements common to s and t
s.difference(t)	            s - t	    new set with elements in s but not in t
s.symmetric_difference(t)	  s ^ t	    new set with elements in either s or t but not both
s.copy()	 	                          new set with a shallow copy of s

#77%
class Solution:
    def findWords(self, words: List[str]) -> List[str]:
        mid = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L']
        top = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P']
        bottom = ['Z', 'X', 'C', 'V', 'B', 'N','M']
        ans = []
        flag = ''
        count = 0
        for word in words:
            if word[0].upper() in mid:
                    flag = 'mid'
            elif word[0].upper() in top:
                    flag = 'top'
            else:
                    flag = 'bottom'
            for w in word:
                if flag == 'mid':
                    if w.upper() in mid:
                        count += 1
                if flag == 'top':
                    if w.upper() in top:
                        count += 1
                if flag == 'bottom':
                    if w.upper() in bottom:
                        count += 1
            if count == len(word):
                ans.append(word)
            flag = ''
            count = 0
        return ans
            
  
            





