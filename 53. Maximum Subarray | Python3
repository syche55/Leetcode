"""
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
"""


class Solution(object):
    def maxSubArray(self, nums):
        cur_sum = 0
        max_sum = min(nums)
        for i in nums:
            if cur_sum < 0:
                cur_sum = i
            else:
                cur_sum += i
            max_sum = max(max_sum, cur_sum)
        return max_sum


# We are actually updating two things: i and j, i is the left bound, and j is the size of the window
# When the sum is less than 0, it means the whole part could be ignored, 
# the left bound starts from the current number(cur_sum = i)
