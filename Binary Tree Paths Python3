Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        if not root:
            return []
        ans = []
        stack = [(root, '')]
        while stack:
            node, curr = stack.pop()
            if not node.left and not node.right:
                ans.append(curr + str(node.val))
            if node.right:
                stack.append((node.right, curr + str(node.val) + '->'))
            if node.left:
                stack.append((node.left, curr + str(node.val) + '->'))
        return ans       
#dfs & stack

class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        ans = []
        def dfs(root, curr):
            if not root:
                return
            if not root.left and not root.right:
                ans.append(curr + str(root.val))
            if root.left:
                dfs(root.left, curr + str(root.val) + '->')
            if root.right:
                dfs(root.right, curr + str(root.val) + '->')
        dfs(root, '')
        return ans
#dfs & recursion
