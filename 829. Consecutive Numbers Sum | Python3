"""
Given a positive integer N, how many ways can we write it as a sum of consecutive positive integers?

Example 1:

Input: 5
Output: 2
Explanation: 5 = 5 = 2 + 3
Example 2:

Input: 9
Output: 3
Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4
Example 3:

Input: 15
Output: 4
Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
"""


from math import *
class Solution:
    def consecutiveNumbersSum(self, N: int) -> int:
        if N == 1:
            return 1
        count = 1
        if N % 2 == 1:
            count += 1
            
        for i in range (2, int(sqrt(N) + 1)):
            if N % i == 0:
                if i % 2 == 1:
                    count += 1
                j = N // i
                if j % 2 == 1 and j != i:
                    count += 1
        return count
        
        
6 = 6 = 1 + 2 + 3
15 = 4 + 5 + 6 
   = 1 + 2 + 3 + 4 + 5
   = 7 + 8
take 6 as an example:
range from [2, 4)
6 % i == 0:
if i is even, useless
if i is odd, can form a consecutive number serial around j(6 // i = j), count += 1
if j is even, useless
if j is odd, can form a consecutive number serial around i (i != j), count += 1
if N is odd:
N = k + k + 1, (15 = 7 + 8), count += 1
