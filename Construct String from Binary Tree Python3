# Input: Binary tree: [1,2,3,null,4]
#       1
#     /   \
#    2     3
#     \  
#      4 
# Output: "1(2()(4))(3)"

# Input: Binary tree: [1,2,3,4]
#       1
#     /   \
#    2     3
#   /    
#  4     
# Output: "1(2(4))(3)"


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def tree2str(self, t: TreeNode) -> str:
        if not t:
            return ''
        ans = str(t.val)
        if t.left:
            ans = ans + '(' + self.tree2str(t.left) + ')'
        if not t.left and t.right:
            ans = ans + '()'
        if t.right:
            ans = ans + '(' + self.tree2str(t.right) + ')'        
        return ans
        
        
#recursion + tree
