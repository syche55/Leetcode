"""
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
"""



class Solution:
    def search(self, nums, target):
        if not nums:
            return -1
        if len(nums) == 1:
            if nums[0] == target:
                return 0
            else:
                return -1
                
#First check which part the target is in, no need to get an ordered list            
        cut = 0
        for i in range(1, len(nums)):
            if nums[i] - nums[i - 1] < 0:
                cut = i
        if nums[cut] <= target <= nums[-1]:
            left, right = cut, len(nums) - 1
        elif nums[0] <= target <= nums[cut-1]:
            left, right = 0, cut
        else:
            return -1

#Binary_search
        def binary_search(nums, left, right, target):
            if right >= left:
                mid = left + (right - left) // 2
                if nums[mid] == target:
                    return mid
                elif nums[mid] > target:
                    return binary_search(nums, left, mid - 1, target)
                else:
                    return binary_search(nums, mid + 1, right, target)
            else:
                return -1


        ans = binary_search(nums, left, right, target)
        return ans
        
        
        
-----------------------------------------------------------------------

class Solution:
    def search(self, nums, target):
        if len(nums) == 1:
            if nums[0] == target:
                return 0
            else:
                return -1
        cut = 0
        for i in range(1, len(nums)):
            if nums[i] - nums[i - 1] < 0:
                cut = i
        ordered_nums = nums[cut:] + nums[:cut]
        left, right = 0, len(nums) - 1

        def binary_search(ordered_nums, left, right, target):
            if right >= left:
                mid = left + (right - left) // 2
                if ordered_nums[mid] == target:
                    return mid
                elif ordered_nums[mid] > target:
                    return binary_search(ordered_nums, left, mid - 1, target)
                else:
                    return binary_search(ordered_nums, mid + 1, right, target)
            else:
                return -1

        ans = binary_search(ordered_nums, left, right, target)
        
#Convert to original position
        if ans == -1:
            return ans
        else:
            if ans >= len(nums) - cut:
                return ans - len(nums) + cut
            else:
                return ans + cut
