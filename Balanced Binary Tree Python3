Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if not root:
            return True
        
        #not root: return 0
        #hleft -1 hright -1: children tree not balanced, main tree not balanced, return -1
        #hleft hright difference >1: not balanced, return -1
        #hleft hright difference <= 1: return height of the tree, return max(hleft, hright)+1
        #think about a single node, assuming the helper function is there for you to use, then think about the edge case(exit condition)
        def getHeight(root):
            if not root:
                return 0
            hleft, hright = getHeight(root.left), getHeight(root.right)

            if hleft == -1 or hright == -1:
                return -1
            if abs(hleft - hright) > 1: 
                return -1
            else:
                return max(hleft, hright)+1
            
        return (getHeight(root)>=0)
